# Eter Hybrid Integration Workflow (Improved Version)
name: Eter Hybrid Integration Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Prevent the bot's own commits from triggering the workflow again
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  businessIntelligenceAnalysis:
    runs-on: ubuntu-latest
    # Grant permissions for the workflow to write comments on PRs and push to a branch
    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1. Pobierz pliki repozytorium (z pełną historią, żeby móc porównać zmiany)
      - name: Pobranie repozytorium
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      # 2. Wyodrębnij zmiany w kodzie (diff)
      - name: Ustalenie zmian w kodzie
        id: get_diff
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Diff dla Pull Request: porównanie gałęzi PR z gałęzią docelową (main)
            DIFF_CONTENT=$(git diff "origin/${{ github.base_ref }}" "origin/${{ github.head_ref }}")
          else
            # Diff dla Push: porównanie ostatniego commita (HEAD) z poprzednim (HEAD~1)
            DIFF_CONTENT=$(git diff HEAD~1 HEAD)
          fi
          # Zapisanie diff do zmiennej wyjściowej kroku
          echo "diff_content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$DIFF_CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # 3. Instalacja jq do obsługi formatu JSON
      - name: Instalacja jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 4. Wywołanie Perplexity z kontekstem zmian
      - name: Analiza biznesowa zmian w Perplexity
        id: analizaBiznesowa
        run: |
          # Bezpieczne budowanie zapytania JSON przy użyciu jq
          JSON_PAYLOAD=$(jq -n \
            --arg model "sonar-medium-32k-online" \
            --arg system_prompt "Jesteś Eterem, ekspertem od analizy kontekstu biznesowego. Twoim zadaniem jest zwięzła analiza przedstawionych zmian w kodzie (w formacie 'diff'). Skoncentruj się na potencjalnej wartości biznesowej, ryzykach i zasugeruj możliwe ulepszenia." \
            --arg user_prompt "Przeanalizuj poniższe zmiany w kodzie i przedstaw swoją ocenę:\n\n\`\`\`diff\n${{ steps.get_diff.outputs.diff_content }}\n\`\`\`" \
            '{
              model: $model,
              messages: [
                {role: "system", content: $system_prompt},
                {role: "user", content: $user_prompt}
              ]
            }')

          # Wywołanie API i wyodrębnienie odpowiedzi
          RESPONSE_CONTENT=$(curl -s -X POST https://api.perplexity.ai/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.PERPLEXITY_API_KEY }}" \
            -d "$JSON_PAYLOAD" | jq -r '.choices[0].message.content')

          # Zapisanie czystej odpowiedzi do zmiennej wyjściowej
          echo "analysis_result<<EOF" >> "$GITHUB_OUTPUT"
          echo "$RESPONSE_CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # 5. Opublikuj analizę jako komentarz w Pull Request
      - name: Publikacja komentarza w Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 🤖 Analiza Biznesowa (Eter)\n\n---\n\n${{ steps.analizaBiznesowa.outputs.analysis_result }}`
            })

      # 6. Zapisz analizę do pliku w gałęzi 'analysis-branch' (dla push na main)
      - name: Zapis i commit pliku z analizą
        if: github.event_name == 'push'
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          ANALYSIS_FILE="business_analysis_${TIMESTAMP
